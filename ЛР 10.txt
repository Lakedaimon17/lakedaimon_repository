//Необходимо создать массив(не коллекцию), состоящий из объектов, характеризующих ученика класса. в объекте будут следующие поля:
ФИО(можно в одном поле)
Год рождения
ФИО мамы
ФИО папы
Адрес(наименование улицы, дом и квартира, можно в одном поле)

Необходимо реализовать методы по заполнению, по изменению, по поиску всех учеников, начинающихся на заданный символ и поиск всех учеников, проживающих на заданной улице.(Предусмотреть возможность не заполнять поля одного или двух родителей)

В головной программе меню, которое позволяет выбрать или заполнение, или модификацию, или выборку по одному запросу или по другому и выход.

Модификация данных будет проводиться по ФИО ребенка. Если ничего нет, то выдать сообщение. Если массив пустой, то выдать сообщение. Сделать выборку по году рождения//


using System;

class Student
{
    public string FullName { get; set; }
    public int YearOfBirth { get; set; }
    public string MotherFullName { get; set; }
    public string FatherFullName { get; set; }
    public string Address { get; set; }

    public Student(string fullName, int yearOfBirth, string motherFullName, string fatherFullName, string address)
    {
        FullName = fullName;
        YearOfBirth = yearOfBirth;
        MotherFullName = motherFullName;
        FatherFullName = fatherFullName;
        Address = address;
    }

    public override string ToString()
    {
        return $"ФИО: {FullName}, Год рождения: {YearOfBirth}, Мама: {MotherFullName}, Папа: {FatherFullName}, Адрес: {Address}";
    }
}

class Program
{
    private static Student[] students = new Student[100];
    private static int studentCount = 0;

    static void Main()
    {
        while (true)
        {
            Console.WriteLine("Меню:");
            Console.WriteLine("1. Заполнение данных");
            Console.WriteLine("2. Модификация данных");
            Console.WriteLine("3. Поиск по первой букве ФИО");
            Console.WriteLine("4. Поиск по адресу");
            Console.WriteLine("5. Вывод всех учеников по году рождения");
            Console.WriteLine("0. Выход");
            Console.Write("Выберите действие: ");

            string choice = Console.ReadLine();
            switch (choice)
            {
                case "1":
                    FillData();
                    break;
                case "2":
                    ModifyData();
                    break;
                case "3":
                    SearchByInitial();
                    break;
                case "4":
                    SearchByAddress();
                    break;
                case "5":
                    SearchByYearOfBirth();
                    break;
                case "0":
                    return;
                default:
                    Console.WriteLine("Неверный выбор, попробуйте еще раз.");
                    break;
            }
        }
    }

    private static void FillData()
    {
        if (studentCount >= students.Length)
        {
            Console.WriteLine("Достигнуто максимальное количество студентов.");
            return;
        }

        Console.Write("Введите ФИО ученика: ");
        string fullName = Console.ReadLine();

        Console.Write("Введите год рождения: ");
        int yearOfBirth = int.Parse(Console.ReadLine());

        Console.Write("Введите ФИО мамы (если нет, оставьте пустым): ");
        string motherFullName = Console.ReadLine();

        Console.Write("Введите ФИО папы (если нет, оставьте пустым): ");
        string fatherFullName = Console.ReadLine();

        Console.Write("Введите адрес: ");
        string address = Console.ReadLine();

        students[studentCount] = new Student(fullName, yearOfBirth, motherFullName, fatherFullName, address);
        studentCount++;

        Console.WriteLine("Данные успешно добавлены.");
    }

    private static void ModifyData()
    {
        if (studentCount == 0)
        {
            Console.WriteLine("Массив студентов пуст.");
            return;
        }

        Console.Write("Введите ФИО ученика для изменения данных: ");
        string fullName = Console.ReadLine();
        bool found = false;

        for (int i = 0; i < studentCount; i++)
        {
            if (students[i].FullName.Equals(fullName, StringComparison.OrdinalIgnoreCase))
            {
                found = true;
                Console.WriteLine("Текущие данные: " + students[i]);
                Console.Write("Введите новый год рождения: ");
                students[i].YearOfBirth = int.Parse(Console.ReadLine());
                Console.Write("Введите новое ФИО мамы (можно оставить пустым): ");
                students[i].MotherFullName = Console.ReadLine();
                Console.Write("Введите новое ФИО папы (можно оставить пустым): ");
                students[i].FatherFullName = Console.ReadLine();
                Console.Write("Введите новый адрес: ");
                students[i].Address = Console.ReadLine();

                Console.WriteLine("Данные успешно изменены.");
                break;
            }
        }

        if (!found)
        {
            Console.WriteLine("Ученик с таким ФИО не найден.");
        }
    }

    private static void SearchByInitial()
    {
        Console.Write("Введите первую букву ФИО для поиска: ");
        char initial = Console.ReadLine()[0];
        bool found = false;

        Console.WriteLine($"Учащиеся, начинающиеся на '{initial}':");
        for (int i = 0; i < studentCount; i++)
        {
            if (students[i].FullName.StartsWith(initial.ToString(), StringComparison.OrdinalIgnoreCase))
            {
                Console.WriteLine(students[i]);
                found = true;
            }
        }

        if (!found)
        {
            Console.WriteLine("Учеников с такой первой буквой не найдено.");
        }
    }

    private static void SearchByAddress()
    {
        Console.Write("Введите улицу для поиска: ");
        string street = Console.ReadLine();
        bool found = false;

        Console.WriteLine($"Учащиеся, проживающие на улице '{street}':");
        for (int i = 0; i < studentCount; i++)
        {
            if (students[i].Address.Contains(street, StringComparison.OrdinalIgnoreCase))
            {
                Console.WriteLine(students[i]);
                found = true;
            }
        }

        if (!found)
        {
            Console.WriteLine("Учеников с такой улицей не найдено.");
        }
    }

    private static void SearchByYearOfBirth()
    {
        Console.Write("Введите год рождения для поиска: ");
        int year = int.Parse(Console.ReadLine());
        bool found = false;

        Console.WriteLine($"Учащиеся, родившиеся в {year}:");
        for (int i = 0; i < studentCount; i++)
        {
            if (students[i].YearOfBirth == year)
            {
                Console.WriteLine(students[i]);
                found = true;
            }
        }

        if (!found)
        {
            Console.WriteLine($"Учеников, родившихся в {year}, не найдено.");
        }
    }
}