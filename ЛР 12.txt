//Класс "животные", в котором одно поле "наименование"
Класс "птицы", наследник "животные"
Класс "млекопитающие", наследник "животные"
В классе "птицы" характеристики: где обитают, куда летят зимовать
В классе "млекопитающие" характеристики: обитание, вес животного
Создание массива "птицы", создание массива "млекопитающие". Выборка по обитанию и там, и там. Для "птицы" выборка с местом зимовки. А для млекопитающих выборка по весу животного. Без списков.//


using System;

public class Animal
{
    public string Name { get; set; }

    public Animal(string name)
    {
        Name = name;
    }
}

public class Bird : Animal
{
    public string Habitat { get; set; }
    public string WinteringPlace { get; set; }

    public Bird(string name, string habitat, string winteringPlace) : base(name)
    {
        Habitat = habitat;
        WinteringPlace = winteringPlace;
    }

    public override string ToString()
    {
        return $"{Name}, место обитания: {Habitat}, место зимовки: {WinteringPlace}";
    }
}

public class Mammal : Animal
{
    public string Habitat { get; set; }
    public double Weight { get; set; }

    public Mammal(string name, string habitat, double weight) : base(name)
    {
        Habitat = habitat;
        Weight = weight;
    }

    public override string ToString()
    {
        return $"{Name}, место обитания: {Habitat}, вес: {Weight} кг";
    }
}

public class Program
{
    private static Bird[] birds = new Bird[10];
    private static Mammal[] mammals = new Mammal[10];
    private static int birdCount = 0;
    private static int mammalCount = 0;

    public static void Main()
    {
        while (true)
        {
            Console.WriteLine("Меню:");
            Console.WriteLine("1. Добавить животное");
            Console.WriteLine("2. Найти животное");
            Console.WriteLine("3. Выход");
            Console.Write("Выберите пункт меню: ");
            string choice = Console.ReadLine();

            switch (choice)
            {
                case "1":
                    AddAnimal();
                    break;
                case "2":
                    FilterAnimals();
                    break;
                case "3":
                    return;
                default:
                    Console.WriteLine("Неверный выбор. Пожалуйста, попробуйте снова.");
                    break;
            }
        }
    }

    private static void AddAnimal()
    {
        Console.Write("Введите тип животного (птица/млекопитающее): ");
        string type = Console.ReadLine()?.ToLower();

        if (type == "птица")
        {
            if (birdCount < birds.Length)
            {
                Console.Write("Введите имя птицы: ");
                string name = Console.ReadLine();
                Console.Write("Введите место обитания: ");
                string habitat = Console.ReadLine();
                Console.Write("Введите место зимовки: ");
                string winteringPlace = Console.ReadLine();

                birds[birdCount] = new Bird(name, habitat, winteringPlace);
                birdCount++;
            }
            else
            {
                Console.WriteLine("Максимальное количество птиц достигнуто.");
            }
        }
        else if (type == "млекопитающее")
        {
            if (mammalCount < mammals.Length)
            {
                Console.Write("Введите имя млекопитающего: ");
                string name = Console.ReadLine();
                Console.Write("Введите место обитания: ");
                string habitat = Console.ReadLine();
                Console.Write("Введите вес (кг): ");
                int weight = int.Parse(Console.ReadLine());

                mammals[mammalCount] = new Mammal(name, habitat, weight);
                mammalCount++;
            }
            else
            {
                Console.WriteLine("Максимальное количество млекопитающих достигнуто.");
            }
        }
        else
        {
            Console.WriteLine("Неверный тип животного. Пожалуйста, выберите птицу или млекопитающее.");
        }
    }

    private static void FilterAnimals()
    {
        Console.WriteLine("Выберите способ поиска:");
        Console.WriteLine("1. По месту обитания");
        Console.WriteLine("2. По месту зимовки (только для птиц)");
        Console.WriteLine("3. По весу (только для млекопитающих)");
        Console.Write("Ваш выбор: ");
        string filterChoice = Console.ReadLine();

        switch (filterChoice)
        {
            case "1":
                Console.Write("Введите место обитания для фильтрации: ");
                string habitatFilter = Console.ReadLine();
                Console.WriteLine($"Животные, обитающие в {habitatFilter}:");

                foreach (var bird in birds)
                {
                    if (bird != null && bird.Habitat.Equals(habitatFilter, StringComparison.OrdinalIgnoreCase))
                    {
                        Console.WriteLine(bird);
                    }
                }

                foreach (var mammal in mammals)
                {
                    if (mammal != null && mammal.Habitat.Equals(habitatFilter, StringComparison.OrdinalIgnoreCase))
                    {
                        Console.WriteLine(mammal);
                    }
                }
                break;
            case "2":
                Console.Write("Введите место зимовки для фильтрации: ");
                string winteringPlaceFilter = Console.ReadLine();
                Console.WriteLine($"Птицы, зимующие в {winteringPlaceFilter}:");

                foreach (var bird in birds)
                {
                    if (bird != null && bird.WinteringPlace.Equals(winteringPlaceFilter, StringComparison.OrdinalIgnoreCase))
                    {
                        Console.WriteLine(bird);
                    }
                }
                break;
            case "3":
                Console.Write("Введите вес для фильтрации млекопитающих (в кг): ");
                int weightFilter = int.Parse(Console.ReadLine());
                Console.WriteLine($"Млекопитающие с весом {weightFilter} кг:");
                foreach (var mammal in mammals)
                {
                if (mammal != null && mammal.Weight == weightFilter)
                    {
                        Console.WriteLine(mammal);
                    }
                }
                break;
            default:
                Console.WriteLine("Неверный выбор. Пожалуйста, попробуйте снова.");
                break;
        }
    }
}